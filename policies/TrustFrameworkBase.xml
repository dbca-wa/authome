<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<TrustFrameworkPolicy
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:xsd="http://www.w3.org/2001/XMLSchema"
 xmlns="http://schemas.microsoft.com/online/cpim/schemas/2013/06"
 PolicySchemaVersion="0.3.0.0"
 TenantId="dbcab2c.onmicrosoft.com"
 PolicyId="B2C_1A_TrustFrameworkBase"
 PublicPolicyUri="http://dbcab2c.onmicrosoft.com/B2C_1A_TrustFrameworkBase">

    <BuildingBlocks>
        <ClaimsSchema>
            <!-- The ClaimsSchema is divided into three sections:
           1. Section I lists the minimum claims that are required for the user journeys to work properly.
           2. Section II lists the claims required for query string parameters and other special parameters 
              to be passed to other claims providers, esp. login.microsoftonline.com for authentication. 
              Please do not modify these claims.
           3. Section III lists any additional (optional) claims that can be collected from the user, stored 
              in the directory and sent in tokens during sign in. Add new claims to be collected from the user 
              and/or sent in the token in Section III. -->

            <!-- NOTE: The claims schema contains restrictions on certain claims such as passwords and usernames. 
           The trust framework policy treats Azure AD as any other claims provider and all its restrictions 
           are modelled in the policy. A policy could be modified to add more restrictions, or use another 
           claims provider for credential storage which will have its own restrictions. -->

            <!-- SECTION I: Claims required for user journeys to work properly -->

            <!-- The claim socialIdpUserId has been renamed to issuerUserId -->
            <ClaimType Id="issuerUserId">
                <DisplayName>Username</DisplayName>
                <DataType>string</DataType>
                <UserHelpText/>
                <UserInputType>TextBox</UserInputType>
                <Restriction>
                    <Pattern RegularExpression="^[a-zA-Z0-9]+[a-zA-Z0-9_-]*$" HelpText="The username you provided is not valid. It must begin with an alphabet or number and can contain alphabets, numbers and the following symbols: _ -"/>
                </Restriction>
            </ClaimType>

            <ClaimType Id="tenantId">
                <DisplayName>User's Object's Tenant ID</DisplayName>
                <DataType>string</DataType>
                <DefaultPartnerClaimTypes>
                    <Protocol Name="OAuth2" PartnerClaimType="tid"/>
                    <Protocol Name="OpenIdConnect" PartnerClaimType="tid"/>
                    <Protocol Name="SAML2" PartnerClaimType="http://schemas.microsoft.com/identity/claims/tenantid"/>
                </DefaultPartnerClaimTypes>
                <UserHelpText>Tenant identifier (ID) of the user object in Azure AD.</UserHelpText>
            </ClaimType>

            <ClaimType Id="objectId">
                <DisplayName>User's Object ID</DisplayName>
                <DataType>string</DataType>
                <DefaultPartnerClaimTypes>
                    <Protocol Name="OAuth2" PartnerClaimType="oid"/>
                    <Protocol Name="OpenIdConnect" PartnerClaimType="oid"/>
                    <Protocol Name="SAML2" PartnerClaimType="http://schemas.microsoft.com/identity/claims/objectidentifier"/>
                </DefaultPartnerClaimTypes>
                <UserHelpText>Object identifier (ID) of the user object in Azure AD.</UserHelpText>
            </ClaimType>

            <!-- Claims needed for local accounts. -->
            <ClaimType Id="signInName">
                <DisplayName>Sign in name</DisplayName>
                <DataType>string</DataType>
                <UserHelpText/>
                <UserInputType>TextBox</UserInputType>
            </ClaimType>

            <ClaimType Id="signInNames.emailAddress">
                <DisplayName>Email Address</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Email address to use for signing in.</UserHelpText>
                <UserInputType>TextBox</UserInputType>
            </ClaimType>

            <ClaimType Id="accountEnabled">
                <DisplayName>Account Enabled</DisplayName>
                <DataType>boolean</DataType>
                <AdminHelpText>Specifies whether the user's account is enabled.</AdminHelpText>
                <UserHelpText>Specifies whether your account is enabled.</UserHelpText>
            </ClaimType>

            <ClaimType Id="password">
                <DisplayName>Password</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Enter password</UserHelpText>
                <UserInputType>Password</UserInputType>
            </ClaimType>

            <!-- The claim types newPassword and reenterPassword are considered special, please do not change the names. 
           The UI validates that the user correctly re-entered their password during account creation based on these 
           claim types.	  -->
            <ClaimType Id="newPassword">
                <DisplayName>New Password</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Enter new password</UserHelpText>
                <UserInputType>Password</UserInputType>
                <Restriction>
                    <Pattern RegularExpression="^((?=.*[a-z])(?=.*[A-Z])(?=.*\d)|(?=.*[a-z])(?=.*[A-Z])(?=.*[^A-Za-z0-9])|(?=.*[a-z])(?=.*\d)(?=.*[^A-Za-z0-9])|(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z0-9]))([A-Za-z\d@#$%^&amp;*\-_+=[\]{}|\\:',?/`~&quot;();!]|\.(?!@)){8,16}$" HelpText="8-16 characters, containing 3 out of 4 of the following: Lowercase characters, uppercase characters, digits (0-9), and one or more of the following symbols: @ # $ % ^ &amp; * - _ + = [ ] { } | \ : ' , ? / ` ~ &quot; ( ) ; ."/>
                </Restriction>
            </ClaimType>
            <!-- The password regular expression above is constructed for AAD passwords based on restrictions at https://msdn.microsoft.com/en-us/library/azure/jj943764.aspx

        ^( # one of the following four combinations must appear in the password
         (?=.*[a-z])(?=.*[A-Z])(?=.*\d) |            # matches lower case, upper case or digit
         (?=.*[a-z])(?=.*[A-Z])(?=.*[^A-Za-z0-9]) |  # matches lower case, upper case or special character (i.e. non-alpha or digit)
         (?=.*[a-z])(?=.*\d)(?=.*[^A-Za-z0-9]) |     # matches lower case, digit, or special character
         (?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z0-9])       # matches upper case, digit, or special character
        )
        ( # The password must match the following restrictions
         [A-Za-z\d@#$%^&*\-_+=[\]{}|\\:',?/`~"();!] |   # The list of all acceptable characters (without .)
         \.(?!@)                                        # or . can appear as long as not followed by @
        ) {8,16}$                                       # the length must be between 8 and 16 chars inclusive

      -->

            <ClaimType Id="reenterPassword">
                <DisplayName>Confirm New Password</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Confirm new password</UserHelpText>
                <UserInputType>Password</UserInputType>
                <Restriction>
                    <Pattern RegularExpression="^((?=.*[a-z])(?=.*[A-Z])(?=.*\d)|(?=.*[a-z])(?=.*[A-Z])(?=.*[^A-Za-z0-9])|(?=.*[a-z])(?=.*\d)(?=.*[^A-Za-z0-9])|(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z0-9]))([A-Za-z\d@#$%^&amp;*\-_+=[\]{}|\\:',?/`~&quot;();!]|\.(?!@)){8,16}$" HelpText=" "/>
                </Restriction>
            </ClaimType>

            <ClaimType Id="passwordPolicies">
                <DisplayName>Password Policies</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Password policies used by Azure AD to determine password strength, expiry etc.</UserHelpText>
            </ClaimType>

            <ClaimType Id="client_id">
                <DisplayName>client_id</DisplayName>
                <DataType>string</DataType>
                <AdminHelpText>Special parameter passed to EvoSTS.</AdminHelpText>
                <UserHelpText>Special parameter passed to EvoSTS.</UserHelpText>
            </ClaimType>

            <ClaimType Id="resource_id">
                <DisplayName>resource_id</DisplayName>
                <DataType>string</DataType>
                <AdminHelpText>Special parameter passed to EvoSTS.</AdminHelpText>
                <UserHelpText>Special parameter passed to EvoSTS.</UserHelpText>
            </ClaimType>

            <ClaimType Id="sub">
                <DisplayName>Subject</DisplayName>
                <DataType>string</DataType>
                <DefaultPartnerClaimTypes>
                    <Protocol Name="OpenIdConnect" PartnerClaimType="sub"/>
                </DefaultPartnerClaimTypes>
                <UserHelpText/>
            </ClaimType>

            <ClaimType Id="alternativeSecurityId">
                <DisplayName>AlternativeSecurityId</DisplayName>
                <DataType>string</DataType>
                <UserHelpText/>
            </ClaimType>

            <ClaimType Id="mailNickName">
                <DisplayName>MailNickName</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Your mail nick name as stored in the Azure Active Directory.</UserHelpText>
            </ClaimType>

            <ClaimType Id="identityProvider">
                <DisplayName>Identity Provider</DisplayName>
                <DataType>string</DataType>
                <DefaultPartnerClaimTypes>
                    <Protocol Name="OAuth2" PartnerClaimType="idp"/>
                    <Protocol Name="OpenIdConnect" PartnerClaimType="idp"/>
                    <Protocol Name="SAML2" PartnerClaimType="http://schemas.microsoft.com/identity/claims/identityprovider"/>
                </DefaultPartnerClaimTypes>
                <UserHelpText/>
            </ClaimType>

            <ClaimType Id="displayName">
                <DisplayName>Display Name</DisplayName>
                <DataType>string</DataType>
                <DefaultPartnerClaimTypes>
                    <Protocol Name="OAuth2" PartnerClaimType="unique_name"/>
                    <Protocol Name="OpenIdConnect" PartnerClaimType="name"/>
                    <Protocol Name="SAML2" PartnerClaimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"/>
                </DefaultPartnerClaimTypes>
                <UserHelpText>Your display name.</UserHelpText>
                <UserInputType>TextBox</UserInputType>
            </ClaimType>

            <ClaimType Id="email">
                <DisplayName>Email Address</DisplayName>
                <DataType>string</DataType>
                <DefaultPartnerClaimTypes>
                    <Protocol Name="OpenIdConnect" PartnerClaimType="email"/>
                </DefaultPartnerClaimTypes>
                <UserHelpText>Email address that can be used to contact you.</UserHelpText>
                <UserInputType>TextBox</UserInputType>
                <Restriction>
                    <Pattern RegularExpression="^[a-zA-Z0-9.!#$%&amp;'^_`{}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$" HelpText="Please enter a valid email address."/>
                </Restriction>
            </ClaimType>

            <ClaimType Id="otherMails">
                <DisplayName>Alternate Email Addresses</DisplayName>
                <DataType>stringCollection</DataType>
                <UserHelpText>Email addresses that can be used to contact the user.</UserHelpText>
            </ClaimType>

            <ClaimType Id="userPrincipalName">
                <DisplayName>UserPrincipalName</DisplayName>
                <DataType>string</DataType>
                <DefaultPartnerClaimTypes>
                    <Protocol Name="OAuth2" PartnerClaimType="upn"/>
                    <Protocol Name="OpenIdConnect" PartnerClaimType="upn"/>
                    <Protocol Name="SAML2" PartnerClaimType="http://schemas.microsoft.com/identity/claims/userprincipalname"/>
                </DefaultPartnerClaimTypes>
                <UserHelpText>Your user name as stored in the Azure Active Directory.</UserHelpText>
            </ClaimType>

            <ClaimType Id="upnUserName">
                <DisplayName>UPN User Name</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>The user name for creating user principal name.</UserHelpText>
            </ClaimType>

            <ClaimType Id="newUser">
                <DisplayName>User is new</DisplayName>
                <DataType>boolean</DataType>
                <UserHelpText/>
            </ClaimType>

            <ClaimType Id="executed-SelfAsserted-Input">
                <DisplayName>Executed-SelfAsserted-Input</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>A claim that specifies whether attributes were collected from the user.</UserHelpText>
            </ClaimType>

            <ClaimType Id="authenticationSource">
                <DisplayName>AuthenticationSource</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Specifies whether the user was authenticated at Social IDP or local account.</UserHelpText>
            </ClaimType>

            <!-- SECTION II: Claims required to pass on special parameters (including some query string parameters) to other claims providers -->

            <ClaimType Id="nca">
                <DisplayName>nca</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Special parameter passed for local account authentication to login.microsoftonline.com.</UserHelpText>
            </ClaimType>

            <ClaimType Id="grant_type">
                <DisplayName>grant_type</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Special parameter passed for local account authentication to login.microsoftonline.com.</UserHelpText>
            </ClaimType>

            <ClaimType Id="scope">
                <DisplayName>scope</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Special parameter passed for local account authentication to login.microsoftonline.com.</UserHelpText>
            </ClaimType>

            <ClaimType Id="objectIdFromSession">
                <DisplayName>objectIdFromSession</DisplayName>
                <DataType>boolean</DataType>
                <UserHelpText>Parameter provided by the default session management provider to indicate that the object id has been retrieved from an SSO session.</UserHelpText>
            </ClaimType>

            <ClaimType Id="isActiveMFASession">
                <DisplayName>isActiveMFASession</DisplayName>
                <DataType>boolean</DataType>
                <UserHelpText>Parameter provided by the MFA session management to indicate that the user has an active MFA session.</UserHelpText>
            </ClaimType>

            <!-- SECTION III: Additional claims that can be collected from the users, stored in the directory, and sent in the token. Add additional claims here. -->

            <ClaimType Id="givenName">
                <DisplayName>Given Name</DisplayName>
                <DataType>string</DataType>
                <DefaultPartnerClaimTypes>
                    <Protocol Name="OAuth2" PartnerClaimType="given_name"/>
                    <Protocol Name="OpenIdConnect" PartnerClaimType="given_name"/>
                    <Protocol Name="SAML2" PartnerClaimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname"/>
                </DefaultPartnerClaimTypes>
                <UserHelpText>Your given name (also known as first name).</UserHelpText>
                <UserInputType>TextBox</UserInputType>
            </ClaimType>

            <ClaimType Id="surname">
                <DisplayName>Surname</DisplayName>
                <DataType>string</DataType>
                <DefaultPartnerClaimTypes>
                    <Protocol Name="OAuth2" PartnerClaimType="family_name"/>
                    <Protocol Name="OpenIdConnect" PartnerClaimType="family_name"/>
                    <Protocol Name="SAML2" PartnerClaimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname"/>
                </DefaultPartnerClaimTypes>
                <UserHelpText>Your surname (also known as family name or last name).</UserHelpText>
                <UserInputType>TextBox</UserInputType>
            </ClaimType>

            <ClaimType Id="Otp">
                <DisplayName>Enter Secondary One-time password</DisplayName>
                <DataType>string</DataType>
            </ClaimType>
            <ClaimType Id="emailRequestBody">
                <DisplayName>SendGrid request body</DisplayName>
                <DataType>string</DataType>
            </ClaimType>


            <ClaimType Id="VerificationCode">
                <DisplayName>Enter Email Verification Code</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Enter your email verification code</UserHelpText>
                <UserInputType>TextBox</UserInputType>
            </ClaimType>

            <ClaimType Id="strongAuthenticationPhoneNumber">
                <DisplayName>Phone Number</DisplayName>
                <DataType>string</DataType>
                <Mask Type="Simple">XXX-XXX-</Mask>
                <UserHelpText>Your telephone number</UserHelpText>
            </ClaimType>

            <ClaimType Id="Verified.strongAuthenticationPhoneNumber">
                <DisplayName>Verified Phone Number</DisplayName>
                <DataType>string</DataType>
                <DefaultPartnerClaimTypes>
                    <Protocol Name="OpenIdConnect" PartnerClaimType="phone_number"/>
                </DefaultPartnerClaimTypes>
                <Mask Type="Simple">XXX-XXX-</Mask>
                <UserHelpText>Your office phone number that has been verified</UserHelpText>
            </ClaimType>

            <ClaimType Id="newPhoneNumberEntered">
                <DisplayName>New Phone Number Entered</DisplayName>
                <DataType>boolean</DataType>
            </ClaimType>

            <ClaimType Id="extension_mfaMethod">
                <DisplayName>Please select your preferred MFA method</DisplayName>
                <DataType>string</DataType>
                <UserInputType>RadioSingleSelect</UserInputType>
                <Restriction>
                    <Enumeration Text="Totp Token" Value="totp" SelectByDefault="true"/>
                    <Enumeration Text="Phone" Value="phone" SelectByDefault="false"/>
                    <Enumeration Text="Email" Value="email" SelectByDefault="false"/>
                    <Enumeration Text="None " Value="none" SelectByDefault="false"/>
                </Restriction>
            </ClaimType>

            <ClaimType Id="enableMFA">
                <DisplayName>enable mfa or not</DisplayName>
                <DataType>boolean</DataType>
            </ClaimType>


            <ClaimType Id="userIdForMFA">
                <DisplayName>UserId for MFA</DisplayName>
                <DataType>string</DataType>
            </ClaimType>

            <ClaimType Id="userEmailAccount">
                <DisplayName>Email Address</DisplayName>
                <DataType>string</DataType>
                <UserHelpText/>
                <UserInputType>Readonly</UserInputType>
            </ClaimType>

            <!-- The app code user provided-->
            <ClaimType Id="totpCode">
                <DisplayName>Enter Auth App Verification Code</DisplayName>
                <DataType>string</DataType>
                <UserInputType>TextBox</UserInputType>
            </ClaimType>

            <!-- the QR code for app registrations-->
            <ClaimType Id="totpQRCodeBitmap">
                <DisplayName>Scan the follwoing QR code to register</DisplayName>
                <DataType>string</DataType>
                <UserInputType>Readonly</UserInputType>
            </ClaimType>

            <!-- Store the flag which indicate whethter totp is registered by user-->
            <ClaimType Id="totpRegistered">
                <DisplayName>Totp registered</DisplayName>
                <DataType>boolean</DataType>
                <UserInputType>Readonly</UserInputType>
            </ClaimType>

            <ClaimType Id="githubUserId">
                <DisplayName>GitHub User ID</DisplayName>
                <DataType>long</DataType>
            </ClaimType>

            <ClaimType Id="regenerate">
                <DisplayName>Regenerate</DisplayName>
                <DataType>boolean</DataType>
            </ClaimType>


        </ClaimsSchema>

        <ClaimsTransformations>

            <ClaimsTransformation Id="ChangeEmailToLower" TransformationMethod="ChangeCase">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="email" TransformationClaimType="inputClaim1"/>
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="toCase" DataType="string" Value="LOWER"/>
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="email" TransformationClaimType="outputClaim"/>
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="CreateDisplayNameFromEmail" TransformationMethod="ChangeCase">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="email" TransformationClaimType="inputClaim1"/>
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="toCase" DataType="string" Value="LOWER"/>
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="displayName" TransformationClaimType="outputClaim"/>
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="CreateOtherMailsFromEmail" TransformationMethod="AddItemToStringCollection">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="email" TransformationClaimType="item"/>
                    <InputClaim ClaimTypeReferenceId="otherMails" TransformationClaimType="collection"/>
                </InputClaims>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="otherMails" TransformationClaimType="collection"/>
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="CreateRandomUPNUserName" TransformationMethod="CreateRandomString">
                <InputParameters>
                    <InputParameter Id="randomGeneratorType" DataType="string" Value="GUID"/>
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="upnUserName" TransformationClaimType="outputClaim"/>
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="CreateUserPrincipalName" TransformationMethod="FormatStringClaim">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="upnUserName" TransformationClaimType="inputClaim"/>
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="stringFormat" DataType="string" Value="cpim_{0}@{RelyingPartyTenantId}"/>
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="userPrincipalName" TransformationClaimType="outputClaim"/>
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="CreateAlternativeSecurityId" TransformationMethod="CreateAlternativeSecurityId">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="issuerUserId" TransformationClaimType="key"/>
                    <InputClaim ClaimTypeReferenceId="identityProvider" TransformationClaimType="identityProvider"/>
                </InputClaims>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="alternativeSecurityId" TransformationClaimType="alternativeSecurityId"/>
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="CreateSubjectClaimFromAlternativeSecurityId" TransformationMethod="CreateStringClaim">
                <InputParameters>
                    <InputParameter Id="value" DataType="string" Value="Not supported currently. Use oid claim."/>
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="sub" TransformationClaimType="createdClaim"/>
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="AssertAccountEnabledIsTrue" TransformationMethod="AssertBooleanClaimIsEqualToValue">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="accountEnabled" TransformationClaimType="inputClaim"/>
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="valueToCompareTo" DataType="boolean" Value="true"/>
                </InputParameters>
            </ClaimsTransformation>

            <ClaimsTransformation Id="GenerateEmailRequestBody" TransformationMethod="GenerateJson">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="email" TransformationClaimType="email"/>
                    <InputClaim ClaimTypeReferenceId="otp" TransformationClaimType="otp"/>
                </InputClaims>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="emailRequestBody" TransformationClaimType="outputClaim"/>
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="GenerateEmailRequestBody4UserEmailAccount" TransformationMethod="GenerateJson">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="userEmailAccount" TransformationClaimType="email"/>
                    <InputClaim ClaimTypeReferenceId="otp" TransformationClaimType="otp"/>
                </InputClaims>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="emailRequestBody" TransformationClaimType="outputClaim"/>
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="CreateUserIdForMFA" TransformationMethod="FormatStringClaim">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="objectId" TransformationClaimType="inputClaim"/>
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="stringFormat" DataType="string" Value="{0}@{RelyingPartyTenantId}"/>
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="userIdForMFA" TransformationClaimType="outputClaim"/>
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="CopySignInNameToUserEmailAccount" TransformationMethod="FormatStringClaim">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="signInNames.emailAddress" TransformationClaimType="inputClaim"/>
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="stringFormat" DataType="string" Value="{0}"/>
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="userEmailAccount" TransformationClaimType="outputClaim"/>
                </OutputClaims>
            </ClaimsTransformation>
            <ClaimsTransformation Id="CopyEmailToUserEmailAccount" TransformationMethod="FormatStringClaim">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="email" TransformationClaimType="inputClaim"/>
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="stringFormat" DataType="string" Value="{0}"/>
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="userEmailAccount" TransformationClaimType="outputClaim"/>
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="CreateAlternativeSecurityUserIdForGithub" TransformationMethod="ConvertNumberToStringClaim">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="githubUserId" TransformationClaimType="inputClaim"/>
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="stringFormat" DataType="string" Value="{0}"/>
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="issuerUserId" TransformationClaimType="outputClaim"/>
                </OutputClaims>
            </ClaimsTransformation>

        </ClaimsTransformations>

        <ClientDefinitions>
            <ClientDefinition Id="DefaultWeb">
                <ClientUIFilterFlags>LineMarkers, MetaRefresh</ClientUIFilterFlags>
            </ClientDefinition>
        </ClientDefinitions>
        <ContentDefinitions>

            <!-- This content definition is to render an error page that displays unhandled errors. -->
            <ContentDefinition Id="api.error">
                <LoadUri>~/tenant/templates/AzureBlue/exception.cshtml</LoadUri>
                <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
                <DataUri>urn:com:microsoft:aad:b2c:elements:contract:globalexception:1.2.0</DataUri>
                <Metadata>
                    <Item Key="DisplayName">Error page</Item>
                </Metadata>
            </ContentDefinition>

            <ContentDefinition Id="api.idpselections">
                <LoadUri>~/tenant/templates/AzureBlue/idpSelector.cshtml</LoadUri>
                <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
                <DataUri>urn:com:microsoft:aad:b2c:elements:contract:providerselection:1.2.0</DataUri>
                <Metadata>
                    <Item Key="DisplayName">Idp selection page</Item>
                    <Item Key="language.intro">Sign in</Item>
                </Metadata>
            </ContentDefinition>

            <ContentDefinition Id="api.idpselections.signup">
                <LoadUri>~/tenant/templates/AzureBlue/idpSelector.cshtml</LoadUri>
                <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
                <DataUri>urn:com:microsoft:aad:b2c:elements:contract:providerselection:1.2.0</DataUri>
                <Metadata>
                    <Item Key="DisplayName">Idp selection page</Item>
                    <Item Key="language.intro">Sign up</Item>
                </Metadata>
            </ContentDefinition>

            <ContentDefinition Id="api.signuporsignin">
                <LoadUri>~/tenant/templates/AzureBlue/unified.cshtml</LoadUri>
                <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
                <DataUri>urn:com:microsoft:aad:b2c:elements:contract:unifiedssp:1.2.0</DataUri>
                <Metadata>
                    <Item Key="DisplayName">Signin and Signup</Item>
                </Metadata>
            </ContentDefinition>

            <ContentDefinition Id="api.selfasserted">
                <LoadUri>~/tenant/templates/AzureBlue/selfAsserted.cshtml</LoadUri>
                <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
                <DataUri>urn:com:microsoft:aad:b2c:elements:contract:selfasserted:2.1.0</DataUri>
                <Metadata>
                    <Item Key="DisplayName">Collect information from user page</Item>
                </Metadata>
            </ContentDefinition>

            <ContentDefinition Id="api.selfasserted.selectMfaMethod">
                <LoadUri>~/tenant/templates/AzureBlue/selfAsserted.cshtml</LoadUri>
                <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
                <DataUri>urn:com:microsoft:aad:b2c:elements:contract:selfasserted:2.1.0</DataUri>
                <Metadata>
                    <Item Key="DisplayName">Collect information from user page</Item>
                </Metadata>
            </ContentDefinition>

            <ContentDefinition Id="api.selfasserted.profileupdate">
                <LoadUri>~/tenant/templates/AzureBlue/selfAsserted.cshtml</LoadUri>
                <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
                <DataUri>urn:com:microsoft:aad:b2c:elements:contract:selfasserted:2.1.0</DataUri>
                <Metadata>
                    <Item Key="DisplayName">Collect information from user page</Item>
                </Metadata>
            </ContentDefinition>

            <ContentDefinition Id="api.localaccountsignup">
                <LoadUri>~/tenant/templates/AzureBlue/selfAsserted.cshtml</LoadUri>
                <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
                <DataUri>urn:com:microsoft:aad:b2c:elements:contract:selfasserted:2.1.0</DataUri>
                <Metadata>
                    <Item Key="DisplayName">Local account sign up page</Item>
                </Metadata>
            </ContentDefinition>

            <ContentDefinition Id="api.localaccountpasswordreset.verifyemail">
                <LoadUri>~/tenant/templates/AzureBlue/selfAsserted.cshtml</LoadUri>
                <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
                <DataUri>urn:com:microsoft:aad:b2c:elements:contract:selfasserted:2.1.0</DataUri>
                <Metadata>
                    <Item Key="DisplayName">Local account change password page</Item>
                </Metadata>
            </ContentDefinition>

            <ContentDefinition Id="api.localaccountpasswordreset">
                <LoadUri>~/tenant/templates/AzureBlue/selfAsserted.cshtml</LoadUri>
                <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
                <DataUri>urn:com:microsoft:aad:b2c:elements:contract:selfasserted:2.1.0</DataUri>
                <Metadata>
                    <Item Key="DisplayName">Local account change password page</Item>
                </Metadata>
            </ContentDefinition>

            <!-- The following content definition is used for registering a verification app.
      This HTML5 page, reads the QR code and presents image user can scan.
      Note: the paged run JavaScript. Use custom or shared domain to allow running client side code -->
            <ContentDefinition Id="api.selfasserted.totpfactor.registration">
                <LoadUri>~/tenant/templates/AzureBlue/selfAsserted.cshtml</LoadUri>
                <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
                <DataUri>urn:com:microsoft:aad:b2c:elements:contract:selfasserted:2.1.0</DataUri>
                <Metadata>
                    <Item Key="DisplayName">App Factor</Item>
                </Metadata>
            </ContentDefinition>

            <ContentDefinition Id="api.phonefactor">
                <LoadUri>~/tenant/templates/AzureBlue/multifactor-1.0.0.cshtml</LoadUri>
                <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
                <DataUri>urn:com:microsoft:aad:b2c:elements:contract:multifactor:1.2.0</DataUri>
                <Metadata>
                    <Item Key="DisplayName">Multi-factor authentication page</Item>
                </Metadata>
            </ContentDefinition>

        </ContentDefinitions>


        <DisplayControls>
            <DisplayControl Id="emailControl" UserInterfaceControlType="VerificationControl">
                <InputClaims/>
                <DisplayClaims>
                    <DisplayClaim ClaimTypeReferenceId="email" Required="true"/>
                    <DisplayClaim ClaimTypeReferenceId="verificationCode" ControlClaimType="VerificationCode" Required="true"/>
                </DisplayClaims>
                <OutputClaims/>
                <Actions>
                    <Action Id="SendCode">
                        <ValidationClaimsExchange>
                            <ValidationClaimsExchangeTechnicalProfile TechnicalProfileReferenceId="AadSspr-SendCode"/>
                        </ValidationClaimsExchange>
                    </Action>
                    <Action Id="VerifyCode">
                        <ValidationClaimsExchange>
                            <ValidationClaimsExchangeTechnicalProfile TechnicalProfileReferenceId="AadSspr-VerifyCode"/>
                        </ValidationClaimsExchange>
                    </Action>
                </Actions>
            </DisplayControl>

            <DisplayControl Id="emailVerificationControl" UserInterfaceControlType="VerificationControl">
                <DisplayClaims>
                    <DisplayClaim ClaimTypeReferenceId="email" Required="true"/>
                    <DisplayClaim ClaimTypeReferenceId="verificationCode" ControlClaimType="VerificationCode" Required="true"/>
                </DisplayClaims>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="email"/>
                </OutputClaims>
                <Actions>
                    <Action Id="SendCode">
                        <ValidationClaimsExchange>
                            <ValidationClaimsExchangeTechnicalProfile TechnicalProfileReferenceId="GenerateOtp"/>
                            <ValidationClaimsExchangeTechnicalProfile TechnicalProfileReferenceId="AUTH2-SendOtpViaEmail"/>
                        </ValidationClaimsExchange>
                    </Action>
                    <Action Id="VerifyCode">
                        <ValidationClaimsExchange>
                            <ValidationClaimsExchangeTechnicalProfile TechnicalProfileReferenceId="VerifyOtp"/>
                        </ValidationClaimsExchange>
                    </Action>
                </Actions>
            </DisplayControl>

            <DisplayControl Id="userEmailVerificationControl" UserInterfaceControlType="VerificationControl">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="userEmailAccount"/>
                </InputClaims>
                <DisplayClaims>
                    <DisplayClaim ClaimTypeReferenceId="userEmailAccount"/>
                    <DisplayClaim ClaimTypeReferenceId="verificationCode" ControlClaimType="VerificationCode" Required="true"/>
                </DisplayClaims>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="userEmailAccount"/>
                </OutputClaims>
                <Actions>
                    <Action Id="SendCode">
                        <ValidationClaimsExchange>
                            <ValidationClaimsExchangeTechnicalProfile TechnicalProfileReferenceId="GenerateOtp4UserEmailAccount"/>
                            <ValidationClaimsExchangeTechnicalProfile TechnicalProfileReferenceId="AUTH2-SendOtpViaUserEmailAccount"/>
                        </ValidationClaimsExchange>
                    </Action>
                    <Action Id="VerifyCode">
                        <ValidationClaimsExchange>
                            <ValidationClaimsExchangeTechnicalProfile TechnicalProfileReferenceId="VerifyOtp4UserEmailAccount"/>
                        </ValidationClaimsExchange>
                    </Action>
                </Actions>
            </DisplayControl>

        </DisplayControls>
    </BuildingBlocks>

    <!--
        A list of all the claim providers that can be used in the technical policies. If a claims provider is not listed 
        in this section, then it cannot be used in a technical policy.
    -->
    <ClaimsProviders>

        <ClaimsProvider>
            <DisplayName>Local Account SignIn</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="login-NonInteractive">
                    <DisplayName>Local Account SignIn</DisplayName>
                    <Protocol Name="OpenIdConnect"/>
                    <Metadata>
                        <Item Key="UserMessageIfClaimsPrincipalDoesNotExist">We can't seem to find your account</Item>
                        <Item Key="UserMessageIfInvalidPassword">Your password is incorrect</Item>
                        <Item Key="UserMessageIfOldPasswordUsed">Looks like you used an old password</Item>

                        <Item Key="ProviderName">https://sts.windows.net/</Item>
                        <Item Key="METADATA">https://login.microsoftonline.com/{tenant}/.well-known/openid-configuration</Item>
                        <Item Key="authorization_endpoint">https://login.microsoftonline.com/{tenant}/oauth2/token</Item>
                        <Item Key="response_types">id_token</Item>
                        <Item Key="response_mode">query</Item>
                        <Item Key="scope">email openid</Item>
                        <Item Key="grant_type">password</Item>

                        <!-- Policy Engine Clients -->
                        <Item Key="UsePolicyInRedirectUri">false</Item>
                        <Item Key="HttpBinding">POST</Item>
                    </Metadata>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="signInName" PartnerClaimType="username" Required="true"/>
                        <InputClaim ClaimTypeReferenceId="password" Required="true"/>
                        <InputClaim ClaimTypeReferenceId="grant_type" DefaultValue="password"/>
                        <InputClaim ClaimTypeReferenceId="scope" DefaultValue="openid"/>
                        <InputClaim ClaimTypeReferenceId="nca" PartnerClaimType="nca" DefaultValue="1"/>
                    </InputClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="objectId" PartnerClaimType="oid"/>
                        <OutputClaim ClaimTypeReferenceId="tenantId" PartnerClaimType="tid"/>
                        <OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="given_name"/>
                        <OutputClaim ClaimTypeReferenceId="surName" PartnerClaimType="family_name"/>
                        <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name"/>
                        <OutputClaim ClaimTypeReferenceId="userPrincipalName" PartnerClaimType="upn"/>
                        <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="localAccountAuthentication"/>
                    </OutputClaims>
                </TechnicalProfile>

            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <DisplayName>Azure Active Directory</DisplayName>
            <TechnicalProfiles>

                <TechnicalProfile Id="AAD-Common">
                    <DisplayName>Azure Active Directory</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.AzureActiveDirectoryProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <Metadata>
                        <Item Key="ApplicationObjectId">87e7a395-3332-4d90-a438-87382e521249</Item>
                        <Item Key="ClientId">3c51eb38-4127-4f36-b068-66ddba30b23b</Item>
                    </Metadata>
                    <CryptographicKeys>
                        <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer"/>
                    </CryptographicKeys>

                    <!-- We need this here to suppress the SelfAsserted provider from invoking SSO on validation profiles. -->
                    <IncludeInSso>false</IncludeInSso>

                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="signInNames.emailAddress"/>
                    </OutputClaims>

                    <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop"/>
                </TechnicalProfile>

                <!-- Technical profiles for social logins -->

                <TechnicalProfile Id="AAD-UserWriteUsingAlternativeSecurityId">
                    <Metadata>
                        <Item Key="Operation">Write</Item>
                        <Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">true</Item>
                        <Item Key="UserMessageIfClaimsPrincipalAlreadyExists">You are already registered, please press the back button and sign in instead.</Item>
                    </Metadata>
                    <IncludeInSso>false</IncludeInSso>
                    <InputClaimsTransformations>
                        <InputClaimsTransformation ReferenceId="ChangeEmailToLower"/>
                        <InputClaimsTransformation ReferenceId="CreateOtherMailsFromEmail"/>
                    </InputClaimsTransformations>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="AlternativeSecurityId" PartnerClaimType="alternativeSecurityId" Required="true"/>
                    </InputClaims>
                    <PersistedClaims>
                        <!-- Required claims -->
                        <PersistedClaim ClaimTypeReferenceId="alternativeSecurityId"/>
                        <PersistedClaim ClaimTypeReferenceId="userPrincipalName"/>
                        <PersistedClaim ClaimTypeReferenceId="mailNickName" DefaultValue="unknown"/>
                        <PersistedClaim ClaimTypeReferenceId="displayName" DefaultValue="unknown"/>
                        <PersistedClaim ClaimTypeReferenceId="extension_mfaMethod" DefaultValue="none"/>

                        <!-- Optional claims -->
                        <PersistedClaim ClaimTypeReferenceId="otherMails"/>
                        <PersistedClaim ClaimTypeReferenceId="givenName"/>
                        <PersistedClaim ClaimTypeReferenceId="surname"/>
                    </PersistedClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="objectId"/>
                        <!--OutputClaim ClaimTypeReferenceId="newUser" PartnerClaimType="newClaimsPrincipalCreated" /-->
                        <OutputClaim ClaimTypeReferenceId="newUser" DefaultValue="true" AlwaysUseDefaultValue="true"/>

                        <!-- The following other mails claim is needed for the case when a user is created, we get otherMails from directory. Self-asserted provider also has an
                 OutputClaims, and if this is absent, Self-Asserted provider will prompt the user for otherMails. -->
                        <OutputClaim ClaimTypeReferenceId="otherMails"/>
                        <OutputClaim ClaimTypeReferenceId="extension_mfaMethod" DefaultValue="none"/>
                    </OutputClaims>

                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="CopyEmailToUserEmailAccount"/>
                    </OutputClaimsTransformations>

                    <IncludeTechnicalProfile ReferenceId="AAD-Common"/>
                    <UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD"/>
                </TechnicalProfile>

                <TechnicalProfile Id="AAD-UserReadUsingAlternativeSecurityId">
                    <Metadata>
                        <Item Key="Operation">Read</Item>
                        <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
                        <Item Key="UserMessageIfClaimsPrincipalDoesNotExist">User does not exist. Please sign up before you can sign in.</Item>
                    </Metadata>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="AlternativeSecurityId" PartnerClaimType="alternativeSecurityId" Required="true"/>
                    </InputClaims>
                    <OutputClaims>
                        <!-- Required claims -->

                        <OutputClaim ClaimTypeReferenceId="objectId"/>
                        <OutputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber"/>

                        <!-- Optional claims -->
                        <OutputClaim ClaimTypeReferenceId="userPrincipalName"/>
                        <OutputClaim ClaimTypeReferenceId="displayName"/>
                        <OutputClaim ClaimTypeReferenceId="otherMails"/>
                        <OutputClaim ClaimTypeReferenceId="givenName"/>
                        <OutputClaim ClaimTypeReferenceId="surname"/>
                        <OutputClaim ClaimTypeReferenceId="extension_mfaMethod" DefaultValue="none"/>

                    </OutputClaims>

                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="CopyEmailToUserEmailAccount"/>
                    </OutputClaimsTransformations>

                    <IncludeTechnicalProfile ReferenceId="AAD-Common"/>
                </TechnicalProfile>

                <TechnicalProfile Id="AAD-UserReadUsingAlternativeSecurityId-NoError">
                    <Metadata>
                        <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">false</Item>
                    </Metadata>
                    <IncludeTechnicalProfile ReferenceId="AAD-UserReadUsingAlternativeSecurityId"/>
                </TechnicalProfile>

                <!-- Technical profiles for local accounts -->

                <TechnicalProfile Id="AAD-UserWriteUsingLogonEmail">
                    <Metadata>
                        <Item Key="Operation">Write</Item>
                        <Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">true</Item>
                    </Metadata>
                    <IncludeInSso>false</IncludeInSso>
                    <InputClaimsTransformations>
                        <InputClaimsTransformation ReferenceId="ChangeEmailToLower"/>
                        <InputClaimsTransformation ReferenceId="CreateOtherMailsFromEmail"/>
                        <InputClaimsTransformation ReferenceId="CreateDisplayNameFromEmail"/>
                    </InputClaimsTransformations>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="signInNames.emailAddress" Required="true"/>
                    </InputClaims>
                    <PersistedClaims>
                        <!-- Required claims -->
                        <PersistedClaim ClaimTypeReferenceId="email" PartnerClaimType="signInNames.emailAddress"/>
                        <PersistedClaim ClaimTypeReferenceId="newPassword" PartnerClaimType="password"/>
                        <PersistedClaim ClaimTypeReferenceId="displayName" DefaultValue="unknown"/>
                        <PersistedClaim ClaimTypeReferenceId="passwordPolicies" DefaultValue="DisablePasswordExpiration"/>
                        <PersistedClaim ClaimTypeReferenceId="extension_mfaMethod" DefaultValue="none"/>
                        <!--PersistedClaim ClaimTypeReferenceId="Verified.strongAuthenticationPhoneNumber" PartnerClaimType="strongAuthenticationPhoneNumber" /-->

                        <!-- Optional claims. -->
                        <PersistedClaim ClaimTypeReferenceId="otherMails"/>
                        <PersistedClaim ClaimTypeReferenceId="givenName"/>
                        <PersistedClaim ClaimTypeReferenceId="surname"/>
                    </PersistedClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="objectId"/>
                        <!--OutputClaim ClaimTypeReferenceId="newUser" PartnerClaimType="newClaimsPrincipalCreated" /-->
                        <OutputClaim ClaimTypeReferenceId="newUser" DefaultValue="true" AlwaysUseDefaultValue="true"/>

                        <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="localAccountAuthentication"/>
                        <OutputClaim ClaimTypeReferenceId="userPrincipalName"/>
                        <OutputClaim ClaimTypeReferenceId="signInNames.emailAddress"/>
                        <OutputClaim ClaimTypeReferenceId="otherMails"/>
                    </OutputClaims>
                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="CopySignInNameToUserEmailAccount"/>
                    </OutputClaimsTransformations>

                    <IncludeTechnicalProfile ReferenceId="AAD-Common"/>
                    <UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD"/>
                </TechnicalProfile>

                <TechnicalProfile Id="AAD-UserReadUsingEmailAddress">
                    <Metadata>
                        <Item Key="Operation">Read</Item>
                        <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
                        <Item Key="UserMessageIfClaimsPrincipalDoesNotExist">An account could not be found for the provided user ID.</Item>
                    </Metadata>
                    <IncludeInSso>false</IncludeInSso>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="signInNames.emailAddress" Required="true"/>
                    </InputClaims>
                    <OutputClaims>
                        <!-- Required claims -->
                        <OutputClaim ClaimTypeReferenceId="objectId"/>
                        <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="localAccountAuthentication"/>

                        <OutputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber"/>

                        <!-- Optional claims -->
                        <OutputClaim ClaimTypeReferenceId="userPrincipalName"/>
                        <OutputClaim ClaimTypeReferenceId="displayName"/>
                        <OutputClaim ClaimTypeReferenceId="accountEnabled"/>
                        <OutputClaim ClaimTypeReferenceId="otherMails"/>
                        <OutputClaim ClaimTypeReferenceId="signInNames.emailAddress"/>

                        <OutputClaim ClaimTypeReferenceId="extension_mfaMethod" DefaultValue="none"/>

                    </OutputClaims>
                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="AssertAccountEnabledIsTrue"/>
                    </OutputClaimsTransformations>
                    <IncludeTechnicalProfile ReferenceId="AAD-Common"/>
                </TechnicalProfile>

                <TechnicalProfile Id="AAD-UserWritePasswordUsingObjectId">
                    <Metadata>
                        <Item Key="Operation">Write</Item>
                        <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
                    </Metadata>
                    <IncludeInSso>false</IncludeInSso>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="objectId" Required="true"/>
                    </InputClaims>
                    <PersistedClaims>
                        <PersistedClaim ClaimTypeReferenceId="objectId"/>
                        <PersistedClaim ClaimTypeReferenceId="newPassword" PartnerClaimType="password"/>

                        <!-- If the user stepped up during password reset, their phone number should be persisted for future authentication requests. -->
                        <!--PersistedClaim ClaimTypeReferenceId="Verified.strongAuthenticationPhoneNumber" PartnerClaimType="strongAuthenticationPhoneNumber" /-->
                        <PersistedClaim ClaimTypeReferenceId="extension_mfaMethod"/>
                    </PersistedClaims>
                    <IncludeTechnicalProfile ReferenceId="AAD-Common"/>
                </TechnicalProfile>

                <!-- Technical profiles for updating user record using objectId -->

                <TechnicalProfile Id="AAD-UserWriteProfileUsingObjectId">
                    <Metadata>
                        <Item Key="Operation">Write</Item>
                        <Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">false</Item>
                        <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
                    </Metadata>
                    <IncludeInSso>false</IncludeInSso>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="objectId" Required="true"/>
                    </InputClaims>
                    <PersistedClaims>
                        <!-- Required claims -->
                        <PersistedClaim ClaimTypeReferenceId="objectId"/>

                        <!-- If the user stepped up during password reset, their phone number should be persisted for future authentication requests. -->
                        <!--PersistedClaim ClaimTypeReferenceId="Verified.strongAuthenticationPhoneNumber" PartnerClaimType="strongAuthenticationPhoneNumber" /-->

                        <!-- Optional claims -->
                        <PersistedClaim ClaimTypeReferenceId="givenName"/>
                        <PersistedClaim ClaimTypeReferenceId="surname"/>
                        <PersistedClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber"/>
                    </PersistedClaims>
                    <IncludeTechnicalProfile ReferenceId="AAD-Common"/>
                </TechnicalProfile>

                <!-- The following technical profile is used to read data after user authenticates. -->
                <TechnicalProfile Id="AAD-UserReadUsingObjectId">
                    <Metadata>
                        <Item Key="Operation">Read</Item>
                        <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
                    </Metadata>
                    <IncludeInSso>false</IncludeInSso>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="objectId" Required="true"/>
                    </InputClaims>
                    <OutputClaims>
                        <!-- Required claims -->
                        <OutputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber"/>

                        <!-- Optional claims -->
                        <OutputClaim ClaimTypeReferenceId="signInNames.emailAddress"/>
                        <OutputClaim ClaimTypeReferenceId="displayName"/>
                        <OutputClaim ClaimTypeReferenceId="otherMails"/>
                        <OutputClaim ClaimTypeReferenceId="givenName"/>
                        <OutputClaim ClaimTypeReferenceId="surname"/>
                        <OutputClaim ClaimTypeReferenceId="extension_mfaMethod" DefaultValue="none"/>

                    </OutputClaims>
                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="CopySignInNameToUserEmailAccount"/>
                    </OutputClaimsTransformations>

                    <IncludeTechnicalProfile ReferenceId="AAD-Common"/>
                </TechnicalProfile>

                <TechnicalProfile Id="AAD-UserWritePhoneNumberUsingObjectId">
                    <Metadata>
                        <Item Key="Operation">Write</Item>
                        <Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">false</Item>
                        <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
                    </Metadata>
                    <IncludeInSso>false</IncludeInSso>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="objectId" Required="true"/>
                    </InputClaims>
                    <PersistedClaims>
                        <PersistedClaim ClaimTypeReferenceId="objectId"/>
                        <PersistedClaim ClaimTypeReferenceId="Verified.strongAuthenticationPhoneNumber" PartnerClaimType="strongAuthenticationPhoneNumber"/>
                        <PersistedClaim ClaimTypeReferenceId="extension_mfaMethod"/>
                    </PersistedClaims>
                    <IncludeTechnicalProfile ReferenceId="AAD-Common"/>
                </TechnicalProfile>

                <TechnicalProfile Id="AAD-UserWriteMFAMethodUsingObjectId">
                    <Metadata>
                        <Item Key="Operation">Write</Item>
                        <Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">false</Item>
                        <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
                    </Metadata>
                    <IncludeInSso>false</IncludeInSso>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="objectId" Required="true"/>
                    </InputClaims>
                    <PersistedClaims>
                        <PersistedClaim ClaimTypeReferenceId="objectId"/>
                        <PersistedClaim ClaimTypeReferenceId="extension_mfaMethod"/>
                    </PersistedClaims>
                    <IncludeTechnicalProfile ReferenceId="AAD-Common"/>
                </TechnicalProfile>

                <TechnicalProfile Id="AAD-WriteUserTOTPByObjectId">
                    <Metadata>
                        <Item Key="Operation">Write</Item>
                        <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
                    </Metadata>
                    <IncludeInSso>false</IncludeInSso>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="objectId" Required="true"/>
                    </InputClaims>
                    <PersistedClaims>
                        <PersistedClaim ClaimTypeReferenceId="objectId"/>
                        <PersistedClaim ClaimTypeReferenceId="extension_mfaMethod" DefaultValue="totp" AlwaysUseDefaultValue="true"/>
                    </PersistedClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="totpRegistered" DefaultValue="true" AlwaysUseDefaultValue="true"/>
                    </OutputClaims>
                    <IncludeTechnicalProfile ReferenceId="AAD-Common"/>
                </TechnicalProfile>

            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <DisplayName>Self Asserted</DisplayName>
            <TechnicalProfiles>

                <TechnicalProfile Id="SelfAsserted-Social">
                    <DisplayName>User ID signup</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <Metadata>
                        <Item Key="ContentDefinitionReferenceId">api.selfasserted</Item>
                    </Metadata>
                    <CryptographicKeys>
                        <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer"/>
                    </CryptographicKeys>
                    <InputClaims>
                        <!-- These claims ensure that any values retrieved in the previous steps (e.g. from an external IDP) are prefilled. 
                 Note that some of these claims may not have any value, for example, if the external IDP did not provide any of
                 these values, or if the claim did not appear in the OutputClaims section of the IDP.
                 In addition, if a claim is not in the InputClaims section, but it is in the OutputClaims section, then its
                 value will not be prefilled, but the user will still be prompted for it (with an empty value). -->
                        <InputClaim ClaimTypeReferenceId="displayName"/>
                        <InputClaim ClaimTypeReferenceId="givenName"/>
                        <InputClaim ClaimTypeReferenceId="surname"/>
                    </InputClaims>
                    <OutputClaims>
                        <!-- These claims are not shown to the user because their value is obtained through the "ValidationTechnicalProfiles"
                 referenced below, or a default value is assigned to the claim. A claim is only shown to the user to provide a 
                 value if its value cannot be obtained through any other means. -->
                        <OutputClaim ClaimTypeReferenceId="objectId"/>
                        <OutputClaim ClaimTypeReferenceId="newUser"/>
                        <OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true"/>
                        <OutputClaim ClaimTypeReferenceId="otherMails"/>

                        <!-- Optional claims. These claims are collected from the user and can be modified. If a claim is to be persisted in the directory after having been 
                 collected from the user, it needs to be added as a PersistedClaim in the ValidationTechnicalProfile referenced below, i.e. 
                 in AAD-UserWriteUsingAlternativeSecurityId.
            <OutputClaim ClaimTypeReferenceId="displayName" /> 
            <OutputClaim ClaimTypeReferenceId="givenName" />
            <OutputClaim ClaimTypeReferenceId="surname" />-->
                    </OutputClaims>
                    <ValidationTechnicalProfiles>
                        <ValidationTechnicalProfile ReferenceId="AAD-UserWriteUsingAlternativeSecurityId"/>
                    </ValidationTechnicalProfiles>
                    <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialSignup"/>
                </TechnicalProfile>

                <TechnicalProfile Id="SelfAsserted-ProfileUpdate">
                    <DisplayName>User ID signup</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <Metadata>
                        <Item Key="ContentDefinitionReferenceId">api.selfasserted.profileupdate</Item>
                    </Metadata>
                    <IncludeInSso>false</IncludeInSso>

                    <InputClaims>

                        <InputClaim ClaimTypeReferenceId="alternativeSecurityId"/>

                        <InputClaim ClaimTypeReferenceId="userPrincipalName"/>

                        <!-- Optional claims. These claims are collected from the user and can be modified. Any claim added here should be updated in the
                 ValidationTechnicalProfile referenced below so it can be written to directory after being updateed by the user, i.e. AAD-UserWriteProfileUsingObjectId. -->
                        <InputClaim ClaimTypeReferenceId="givenName"/>
                        <InputClaim ClaimTypeReferenceId="surname"/>

                    </InputClaims>
                    <OutputClaims>
                        <!-- Required claims -->
                        <OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true"/>

                        <!-- Optional claims. These claims are collected from the user and can be modified. Any claim added here should be updated in the
                 ValidationTechnicalProfile referenced below so it can be written to directory after being updateed by the user, i.e. AAD-UserWriteProfileUsingObjectId. -->
                        <OutputClaim ClaimTypeReferenceId="givenName"/>
                        <OutputClaim ClaimTypeReferenceId="surname"/>
                    </OutputClaims>

                    <ValidationTechnicalProfiles>
                        <ValidationTechnicalProfile ReferenceId="AAD-UserWriteProfileUsingObjectId"/>
                    </ValidationTechnicalProfiles>
                </TechnicalProfile>

                <TechnicalProfile Id="SelfAsserted-Select-MFA-Method">
                    <DisplayName>Allow user to choose their MFA Method</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <Metadata>
                        <Item Key="ContentDefinitionReferenceId">api.selfasserted.selectMfaMethod</Item>
                    </Metadata>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="extension_mfaMethod"/>
                    </InputClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="extension_mfaMethod" Required="true"/>
                    </OutputClaims>
                </TechnicalProfile>

                <TechnicalProfile Id="SelfAsserted-EmailVerify">
                    <DisplayName>MFA verification via email</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <Metadata>
                        <Item Key="ContentDefinitionReferenceId">api.selfasserted</Item>
                    </Metadata>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="userEmailAccount"/>
                    </InputClaims>
                    <DisplayClaims>
                        <DisplayClaim DisplayControlReferenceId="userEmailVerificationControl"/>
                    </DisplayClaims>
                    <OutputClaims>
                        <!-- Required claims -->
                        <OutputClaim ClaimTypeReferenceId="isActiveMFASession" DefaultValue="true"/>
                        <OutputClaim ClaimTypeReferenceId="userEmailAccount" PartnerClaimType="Verified.Email"/>
                    </OutputClaims>
                    <UseTechnicalProfileForSessionManagement ReferenceId="SM-MFA"/>
                </TechnicalProfile>

            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <DisplayName>Local Account</DisplayName>
            <TechnicalProfiles>

                <TechnicalProfile Id="LocalAccountSignUpWithLogonEmail">
                    <DisplayName>Email signup</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <Metadata>
                        <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
                        <Item Key="ContentDefinitionReferenceId">api.localaccountsignup</Item>
                        <Item Key="language.button_continue">Create</Item>
                    </Metadata>
                    <CryptographicKeys>
                        <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer"/>
                    </CryptographicKeys>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="email"/>
                    </InputClaims>
                    <DisplayClaims>
                        <DisplayClaim DisplayControlReferenceId="emailVerificationControl"/>
                        <DisplayClaim ClaimTypeReferenceId="newPassword" Required="true"/>
                        <DisplayClaim ClaimTypeReferenceId="reenterPassword" Required="true"/>

                        <!-- Optional claims, to be collected from the user -->
                        <DisplayClaim ClaimTypeReferenceId="givenName"/>
                        <DisplayClaim ClaimTypeReferenceId="surName"/>
                    </DisplayClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="objectId"/>
                        <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="Verified.Email" Required="true"/>
                        <OutputClaim ClaimTypeReferenceId="newPassword" Required="true"/>
                        <OutputClaim ClaimTypeReferenceId="reenterPassword" Required="true"/>
                        <OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true"/>
                        <OutputClaim ClaimTypeReferenceId="authenticationSource"/>
                        <OutputClaim ClaimTypeReferenceId="newUser"/>
                        <OutputClaim ClaimTypeReferenceId="extension_mfaMethod" DefaultValue="none"/>

                        <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="local" AlwaysUseDefaultValue="true"/>
                        <OutputClaim ClaimTypeReferenceId="enableMFA" DefaultValue="true" AlwaysUseDefaultValue="true"/>

                        <!-- Optional claims, to be collected from the user 
            <OutputClaim ClaimTypeReferenceId="displayName" />-->
                        <OutputClaim ClaimTypeReferenceId="givenName"/>
                        <OutputClaim ClaimTypeReferenceId="surName"/>
                        <OutputClaim ClaimTypeReferenceId="otherMails"/>
                    </OutputClaims>

                    <ValidationTechnicalProfiles>
                        <ValidationTechnicalProfile ReferenceId="AAD-UserWriteUsingLogonEmail"/>
                    </ValidationTechnicalProfiles>
                    <UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD"/>
                </TechnicalProfile>

                <!-- This technical profile uses a validation technical profile to authenticate the user. -->
                <TechnicalProfile Id="SelfAsserted-LocalAccountSignin-Email">
                    <DisplayName>Local Account Signin</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <Metadata>
                        <Item Key="SignUpTarget">SignUpWithLogonEmailExchange</Item>
                        <Item Key="setting.operatingMode">Email</Item>
                        <Item Key="ContentDefinitionReferenceId">api.selfasserted</Item>
                    </Metadata>
                    <IncludeInSso>false</IncludeInSso>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="signInName"/>
                    </InputClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="signInName" Required="true"/>
                        <OutputClaim ClaimTypeReferenceId="password" Required="true"/>
                        <OutputClaim ClaimTypeReferenceId="objectId"/>
                        <OutputClaim ClaimTypeReferenceId="authenticationSource"/>

                        <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="local" AlwaysUseDefaultValue="true"/>
                        <OutputClaim ClaimTypeReferenceId="enableMFA" DefaultValue="true" AlwaysUseDefaultValue="true"/>

                    </OutputClaims>
                    <ValidationTechnicalProfiles>
                        <ValidationTechnicalProfile ReferenceId="login-NonInteractive"/>
                    </ValidationTechnicalProfiles>
                    <UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD"/>
                </TechnicalProfile>

                <!-- This technical profile forces the user to verify the email address that they provide on the UI. Only after email is verified, the user account is
        read from the directory. -->
                <TechnicalProfile Id="LocalAccountDiscoveryUsingEmailAddress">
                    <DisplayName>Reset password using email address</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <Metadata>
                        <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
                        <Item Key="ContentDefinitionReferenceId">api.localaccountpasswordreset.verifyemail</Item>
                        <Item Key="UserMessageIfClaimsTransformationBooleanValueIsNotEqual">Your account has been locked. Contact your support person to unlock it, then try again.</Item>
                    </Metadata>
                    <CryptographicKeys>
                        <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer"/>
                    </CryptographicKeys>
                    <IncludeInSso>false</IncludeInSso>
                    <DisplayClaims>
                        <DisplayClaim DisplayControlReferenceId="emailVerificationControl"/>
                    </DisplayClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="Verified.Email" Required="true"/>
                        <OutputClaim ClaimTypeReferenceId="objectId"/>
                        <OutputClaim ClaimTypeReferenceId="userPrincipalName"/>
                        <OutputClaim ClaimTypeReferenceId="authenticationSource"/>
                        <OutputClaim ClaimTypeReferenceId="otherMails"/>

                        <OutputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber"/>

                    </OutputClaims>

                    <ValidationTechnicalProfiles>
                        <ValidationTechnicalProfile ReferenceId="AAD-UserReadUsingEmailAddress"/>
                    </ValidationTechnicalProfiles>
                </TechnicalProfile>

                <TechnicalProfile Id="LocalAccountWritePasswordUsingObjectId">
                    <DisplayName>Change password (username)</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <Metadata>
                        <Item Key="ContentDefinitionReferenceId">api.localaccountpasswordreset</Item>
                    </Metadata>
                    <CryptographicKeys>
                        <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer"/>
                    </CryptographicKeys>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="objectId"/>

                        <InputClaim ClaimTypeReferenceId="Verified.strongAuthenticationPhoneNumber"/>

                    </InputClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="newPassword" Required="true"/>
                        <OutputClaim ClaimTypeReferenceId="reenterPassword" Required="true"/>
                        <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="local"/>
                        <OutputClaim ClaimTypeReferenceId="enableMFA" DefaultValue="true" AlwaysUseDefaultValue="true"/>
                        <OutputClaim ClaimTypeReferenceId="signInNames.emailAddress" DefaultValue=""/>
                    </OutputClaims>
                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="CopySignInNameToUserEmailAccount"/>
                    </OutputClaimsTransformations>
                    <ValidationTechnicalProfiles>
                        <ValidationTechnicalProfile ReferenceId="AAD-UserWritePasswordUsingObjectId"/>
                    </ValidationTechnicalProfiles>
                </TechnicalProfile>

                <!--Sample: Create new technical profile based on the password reset technical profile that
            asks the user to provide and verify the email address, and returns the user object id.
            If the account doesn't exist, the technical profile return following error message "An account could not be found for the provided user ID."
            The new technical profile sets the display name to "Sign-In with Email" that is shown on the sign-up or sign-in page-->
                <TechnicalProfile Id="LocalAccountDiscoveryUsingEmailAddress-SignIn">
                    <DisplayName>Sign-In with Email</DisplayName>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="local_passwordless" AlwaysUseDefaultValue="true"/>
                        <OutputClaim ClaimTypeReferenceId="enableMFA" DefaultValue="true" AlwaysUseDefaultValue="true"/>
                    </OutputClaims>
                    <IncludeTechnicalProfile ReferenceId="LocalAccountDiscoveryUsingEmailAddress"/>
                </TechnicalProfile>

            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <DisplayName>Session Management</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="SM-Noop">
                    <DisplayName>Noop Session Management Provider</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.SSO.NoopSSOSessionProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                </TechnicalProfile>

                <TechnicalProfile Id="SM-AAD">
                    <DisplayName>Session Mananagement Provider</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.SSO.DefaultSSOSessionProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <PersistedClaims>
                        <PersistedClaim ClaimTypeReferenceId="objectId"/>
                        <PersistedClaim ClaimTypeReferenceId="signInName"/>
                        <PersistedClaim ClaimTypeReferenceId="authenticationSource"/>
                        <PersistedClaim ClaimTypeReferenceId="identityProvider"/>
                        <PersistedClaim ClaimTypeReferenceId="newUser"/>
                        <PersistedClaim ClaimTypeReferenceId="executed-SelfAsserted-Input"/>
                    </PersistedClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="objectIdFromSession" DefaultValue="true"/>
                    </OutputClaims>
                </TechnicalProfile>

                <!-- Profile name is being used to disambiguate AAD session between sign up and sign in -->
                <TechnicalProfile Id="SM-SocialSignup">
                    <IncludeTechnicalProfile ReferenceId="SM-AAD"/>
                </TechnicalProfile>

                <TechnicalProfile Id="SM-SocialLogin">
                    <DisplayName>Session Mananagement Provider</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.SSO.ExternalLoginSSOSessionProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <Metadata>
                        <Item Key="AlwaysFetchClaimsFromProvider">true</Item>
                    </Metadata>
                    <PersistedClaims>
                        <PersistedClaim ClaimTypeReferenceId="AlternativeSecurityId"/>
                    </PersistedClaims>
                </TechnicalProfile>

                <TechnicalProfile Id="SM-MFA">
                    <DisplayName>Session Mananagement Provider</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.SSO.DefaultSSOSessionProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <PersistedClaims>
                        <PersistedClaim ClaimTypeReferenceId="Verified.strongAuthenticationPhoneNumber"/>
                    </PersistedClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="isActiveMFASession" DefaultValue="true"/>
                    </OutputClaims>
                </TechnicalProfile>

            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <DisplayName>Trustframework Policy Engine TechnicalProfiles</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="TpEngine_c3bd4fe2-1775-4013-b91d-35f16d377d13">
                    <DisplayName>Trustframework Policy Engine Default Technical Profile</DisplayName>
                    <Protocol Name="None"/>
                    <Metadata>
                        <Item Key="url">{service:te}</Item>
                    </Metadata>
                </TechnicalProfile>
            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <DisplayName>Token Issuer</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="JwtIssuer">
                    <DisplayName>JWT Issuer</DisplayName>
                    <Protocol Name="None"/>
                    <OutputTokenFormat>JWT</OutputTokenFormat>
                    <Metadata>
                        <Item Key="client_id">{service:te}</Item>
                        <Item Key="issuer_refresh_token_user_identity_claim_type">objectId</Item>
                        <Item Key="SendTokenResponseBodyWithJsonNumbers">true</Item>
                    </Metadata>
                    <CryptographicKeys>
                        <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer"/>
                        <Key Id="issuer_refresh_token_key" StorageReferenceId="B2C_1A_TokenEncryptionKeyContainer"/>
                    </CryptographicKeys>
                    <InputClaims/>
                    <OutputClaims/>
                </TechnicalProfile>
            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <DisplayName>AAD SSPR</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="AadSspr-SendCode">
                    <DisplayName>Send Code</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.AadSsprProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <Metadata>
                        <Item Key="Operation">SendCode</Item>
                    </Metadata>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="emailAddress"/>
                    </InputClaims>
                </TechnicalProfile>
                <TechnicalProfile Id="AadSspr-VerifyCode">
                    <DisplayName>Verify Code</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.AadSsprProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <Metadata>
                        <Item Key="Operation">VerifyCode</Item>
                    </Metadata>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="verificationCode"/>
                        <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="emailAddress"/>
                    </InputClaims>
                </TechnicalProfile>
            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <DisplayName>One time password technical profiles</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="GenerateOtp">
                    <DisplayName>Generate one time password</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.OneTimePasswordProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <Metadata>
                        <Item Key="Operation">GenerateCode</Item>
                        <Item Key="CodeExpirationInSeconds">300</Item>
                        <Item Key="CodeLength">8</Item>
                        <Item Key="CharacterSet">0-9</Item>
                        <Item Key="ReuseSameCode">true</Item>
                        <Item Key="MaxNumAttempts">5</Item>
                    </Metadata>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="identifier"/>
                    </InputClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="otp" PartnerClaimType="otpGenerated"/>
                    </OutputClaims>
                </TechnicalProfile>

                <TechnicalProfile Id="GenerateOtp4UserEmailAccount">
                    <DisplayName>Generate one time password</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.OneTimePasswordProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <Metadata>
                        <Item Key="Operation">GenerateCode</Item>
                        <Item Key="CodeExpirationInSeconds">300</Item>
                        <Item Key="CodeLength">8</Item>
                        <Item Key="CharacterSet">0-9</Item>
                        <Item Key="ReuseSameCode">true</Item>
                        <Item Key="MaxNumAttempts">5</Item>
                    </Metadata>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="userEmailAccount" PartnerClaimType="identifier"/>
                    </InputClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="otp" PartnerClaimType="otpGenerated"/>
                    </OutputClaims>
                </TechnicalProfile>

                <TechnicalProfile Id="VerifyOtp">
                    <DisplayName>Verify one time password</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.OneTimePasswordProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <Metadata>
                        <Item Key="Operation">VerifyCode</Item>
                    </Metadata>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="identifier"/>
                        <InputClaim ClaimTypeReferenceId="verificationCode" PartnerClaimType="otpToVerify"/>
                    </InputClaims>
                </TechnicalProfile>

                <TechnicalProfile Id="VerifyOtp4UserEmailAccount">
                    <DisplayName>Verify one time password</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.OneTimePasswordProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <Metadata>
                        <Item Key="Operation">VerifyCode</Item>
                    </Metadata>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="userEmailAccount" PartnerClaimType="identifier"/>
                        <InputClaim ClaimTypeReferenceId="verificationCode" PartnerClaimType="otpToVerify"/>
                    </InputClaims>
                </TechnicalProfile>

            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <DisplayName>PhoneFactor</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="PhoneFactor-InputOrVerify">
                    <DisplayName>PhoneFactor</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.PhoneFactorProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <Metadata>
                        <Item Key="ContentDefinitionReferenceId">api.phonefactor</Item>
                        <Item Key="ManualPhoneNumberEntryAllowed">true</Item>
                    </Metadata>
                    <CryptographicKeys>
                        <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer"/>
                    </CryptographicKeys>
                    <InputClaimsTransformations>
                        <InputClaimsTransformation ReferenceId="CreateUserIdForMFA"/>
                    </InputClaimsTransformations>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="userIdForMFA" PartnerClaimType="UserId"/>
                        <InputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber"/>
                    </InputClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="Verified.strongAuthenticationPhoneNumber" PartnerClaimType="Verified.OfficePhone"/>
                        <OutputClaim ClaimTypeReferenceId="newPhoneNumberEntered" PartnerClaimType="newPhoneNumberEntered"/>
                    </OutputClaims>
                    <UseTechnicalProfileForSessionManagement ReferenceId="SM-MFA"/>
                </TechnicalProfile>

                <TechnicalProfile Id="PhoneFactor-EditOrVerify">
                    <DisplayName>PhoneFactor</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.PhoneFactorProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <Metadata>
                        <Item Key="ContentDefinitionReferenceId">api.phonefactor</Item>
                        <Item Key="ManualPhoneNumberEntryAllowed">true</Item>
                    </Metadata>
                    <CryptographicKeys>
                        <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer"/>
                    </CryptographicKeys>
                    <InputClaimsTransformations>
                        <InputClaimsTransformation ReferenceId="CreateUserIdForMFA"/>
                    </InputClaimsTransformations>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="userIdForMFA" PartnerClaimType="UserId"/>
                    </InputClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="Verified.strongAuthenticationPhoneNumber" PartnerClaimType="Verified.OfficePhone"/>
                        <OutputClaim ClaimTypeReferenceId="newPhoneNumberEntered" PartnerClaimType="newPhoneNumberEntered"/>
                    </OutputClaims>
                    <UseTechnicalProfileForSessionManagement ReferenceId="SM-MFA"/>
                </TechnicalProfile>

            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <DisplayName>Auth2 rest api</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="AUTH2-SendOtpViaEmail">
                    <DisplayName>Use Rest API to send the code the the user via email</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <Metadata>
                        <Item Key="AuthenticationType">Bearer</Item>
                        <Item Key="SendClaimsIn">Body</Item>
                        <Item Key="ClaimUsedForRequestPayload">emailRequestBody</Item>
                    </Metadata>
                    <InputClaimsTransformations>
                        <InputClaimsTransformation ReferenceId="GenerateEmailRequestBody"/>
                    </InputClaimsTransformations>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="emailRequestBody"/>
                    </InputClaims>
                </TechnicalProfile>

                <TechnicalProfile Id="AUTH2-SendOtpViaUserEmailAccount">
                    <DisplayName>Use Rest API to send the code the the user via email</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <Metadata>
                        <Item Key="AuthenticationType">Bearer</Item>
                        <Item Key="SendClaimsIn">Body</Item>
                        <Item Key="ClaimUsedForRequestPayload">emailRequestBody</Item>
                    </Metadata>
                    <InputClaimsTransformations>
                        <InputClaimsTransformation ReferenceId="GenerateEmailRequestBody4UserEmailAccount"/>
                    </InputClaimsTransformations>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="emailRequestBody"/>
                    </InputClaims>
                </TechnicalProfile>

                <!--The following technical profile generates a time-based one-time password (TOTP).
        We use the technical  profile to register new user-->
                <TechnicalProfile Id="AUTH2-GenerateTOTPQRCode">
                    <DisplayName>Generate TOTP QR Code</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <Metadata>
                        <Item Key="AuthenticationType">Bearer</Item>
                        <Item Key="SendClaimsIn">Body</Item>
                    </Metadata>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="userEmailAccount" PartnerClaimType="email"/>
                        <InputClaim ClaimTypeReferenceId="identityProvider" PartnerClaimType="idp"/>
                    </InputClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="totpQRCodeBitmap" PartnerClaimType="qrCode"/>
                    </OutputClaims>
                    <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop"/>
                </TechnicalProfile>

                <TechnicalProfile Id="AUTH2-RegenerateTOTPQRCode">
                    <DisplayName>Regenerate TOTP QR Code</DisplayName>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="regenerate" DefaultValue="true" AlwaysUseDefaultValue="true"/>
                    </InputClaims>
                    <IncludeTechnicalProfile ReferenceId="AUTH2-GenerateTOTPQRCode"/>
                </TechnicalProfile>
                <!-- The following technical profile verifies a time-based one-time password (TOTP).
        We call this technical profile during registration process and sign-in process-->
                <TechnicalProfile Id="AUTH2-VerifyTOTPCode">
                    <DisplayName>Verify TOTP Code</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <Metadata>
                        <Item Key="AuthenticationType">Bearer</Item>
                        <Item Key="SendClaimsIn">Body</Item>
                    </Metadata>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="totpCode" PartnerClaimType="totpCode"/>
                        <InputClaim ClaimTypeReferenceId="userEmailAccount" PartnerClaimType="email"/>
                        <InputClaim ClaimTypeReferenceId="identityProvider" PartnerClaimType="idp"/>
                    </InputClaims>
                    <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop"/>
                </TechnicalProfile>
            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <DisplayName>TOTP Factor</DisplayName>
            <TechnicalProfiles>

                <!-- The following technical profile registers a verification phone. -->
                <TechnicalProfile Id="TOTPFactor-Register">
                    <DisplayName>TOTP Factor</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <Metadata>
                        <Item Key="ContentDefinitionReferenceId">api.selfasserted.totpfactor.registration</Item>
                    </Metadata>
                    <CryptographicKeys>
                        <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer"/>
                    </CryptographicKeys>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="email"/>
                        <InputClaim ClaimTypeReferenceId="totpQRCodeBitmap"/>
                    </InputClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="totpCode" Required="true"/>
                        <OutputClaim ClaimTypeReferenceId="totpQRCodeBitmap"/>
                        <OutputClaim ClaimTypeReferenceId="isActiveMFASession" DefaultValue="true"/>
                    </OutputClaims>
                    <ValidationTechnicalProfiles>
                        <ValidationTechnicalProfile ReferenceId="AUTH2-VerifyTOTPCode"/>
                    </ValidationTechnicalProfiles>
                    <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-PhoneFactor"/>
                </TechnicalProfile>

                <!-- Demo: The following technical profile asks the user to provide the TOTP code
        and run calls the validation technical profile to validate the TOTP-->
                <TechnicalProfile Id="TOTPFactor-Challenge">
                    <DisplayName>App Factor</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <Metadata>
                        <Item Key="ContentDefinitionReferenceId">api.selfasserted</Item>
                    </Metadata>
                    <CryptographicKeys>
                        <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer"/>
                    </CryptographicKeys>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="email"/>
                    </InputClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="totpCode" Required="true"/>
                        <OutputClaim ClaimTypeReferenceId="isActiveMFASession" DefaultValue="true"/>
                    </OutputClaims>
                    <ValidationTechnicalProfiles>
                        <ValidationTechnicalProfile ReferenceId="AUTH2-VerifyTOTPCode"/>
                    </ValidationTechnicalProfiles>
                    <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-PhoneFactor"/>
                </TechnicalProfile>

                <TechnicalProfile Id="SSOSession-PhoneFactor">
                    <DisplayName>Session Mananagement Provider</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.SSO.DefaultSSOSessionProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="isActiveMFASession" DefaultValue="true"/>
                    </OutputClaims>
                </TechnicalProfile>

            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <Domain>google.com</Domain>
            <DisplayName>Google</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="Google-OAUTH">
                    <DisplayName>Google</DisplayName>
                    <Protocol Name="OAuth2"/>
                    <Metadata>
                        <Item Key="ProviderName">google</Item>
                        <Item Key="authorization_endpoint">https://accounts.google.com/o/oauth2/auth</Item>
                        <Item Key="AccessTokenEndpoint">https://accounts.google.com/o/oauth2/token</Item>
                        <Item Key="ClaimsEndpoint">https://www.googleapis.com/oauth2/v1/userinfo</Item>
                        <Item Key="scope">email profile</Item>
                        <Item Key="HttpBinding">POST</Item>
                        <Item Key="UsePolicyInRedirectUri">0</Item>
                    </Metadata>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="issuerUserId" PartnerClaimType="id"/>
                        <OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="given_name"/>
                        <OutputClaim ClaimTypeReferenceId="surname" PartnerClaimType="family_name"/>
                        <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name"/>
                        <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="email"/>
                        <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="google.com" AlwaysUseDefaultValue="true"/>
                        <OutputClaim ClaimTypeReferenceId="enableMFA" DefaultValue="false" AlwaysUseDefaultValue="true"/>
                        <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" AlwaysUseDefaultValue="true"/>

                    </OutputClaims>
                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName"/>
                        <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName"/>
                        <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId"/>
                        <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId"/>

                    </OutputClaimsTransformations>
                    <UseTechnicalProfileForSessionManagement ReferenceId="SM-GoogleLogin"/>
                    <ErrorHandlers>
                        <ErrorHandler>
                            <ErrorResponseFormat>json</ErrorResponseFormat>
                            <ResponseMatch>$[?(@.error == 'invalid_grant')]</ResponseMatch>
                            <Action>Reauthenticate</Action>
                            <!--In case of authroziation code used error, we don't want the user to select his account again.-->
                            <!--AdditionalRequestParameters Key="prompt">select_account</AdditionalRequestParameters-->
                        </ErrorHandler>
                    </ErrorHandlers>
                </TechnicalProfile>

                <TechnicalProfile Id="SM-GoogleLogin">
                    <DisplayName>Session Mananagement Provider</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.SSO.ExternalLoginSSOSessionProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
                    <PersistedClaims>
                        <PersistedClaim ClaimTypeReferenceId="objectId"/>
                    </PersistedClaims>
                </TechnicalProfile>
            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <Domain>microsoftonline.com</Domain>
            <DisplayName>DBCA Microsoft 365</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="DBCAM365-OAUTH">
                    <DisplayName>DBCA Microsoft 365</DisplayName>
                    <Protocol Name="OpenIdConnect"/>
                    <Metadata>
                        <Item Key="ProviderName">https://login.microsoftonline.com</Item>
                        <Item Key="METADATA">https://login.microsoftonline.com/dbca.wa.gov.au/.well-known/openid-configuration</Item>
                        <Item Key="response_types">code</Item>
                        <Item Key="response_mode">form_post</Item>
                        <Item Key="scope">openid profile</Item>
                        <Item Key="HttpBinding">POST</Item>
                        <Item Key="UsePolicyInRedirectUri">false</Item>
                        <Item Key="issuer">https://sts.windows.net/7b934664-cdcf-4e28-a3ee-1a5bcca0a1b6/</Item>
                    </Metadata>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="https://sts.windows.net/7b934664-cdcf-4e28-a3ee-1a5bcca0a1b6/" AlwaysUseDefaultValue="true"/>
                        <OutputClaim ClaimTypeReferenceId="enableMFA" DefaultValue="false" AlwaysUseDefaultValue="true"/>
                        <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication"/>
                        <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name"/>
                        <OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="given_name"/>
                        <OutputClaim ClaimTypeReferenceId="surname" PartnerClaimType="family_name"/>
                        <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="unique_name"/>
                        <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" AlwaysUseDefaultValue="true"/>
                        <OutputClaim ClaimTypeReferenceId="issuerUserId" PartnerClaimType="oid"/>
                    </OutputClaims>
                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName"/>
                        <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName"/>
                        <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId"/>
                        <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId"/>
                    </OutputClaimsTransformations>
                    <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin"/>
                </TechnicalProfile>
            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <Domain>github.com</Domain>
            <DisplayName>Github</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="Github-OAUTH">
                    <DisplayName>Github</DisplayName>
                    <Protocol Name="OAuth2"/>
                    <Metadata>
                        <Item Key="ProviderName">github.com</Item>
                        <Item Key="authorization_endpoint">https://github.com/login/oauth/authorize</Item>
                        <Item Key="AccessTokenEndpoint">https://github.com/login/oauth/access_token</Item>
                        <Item Key="ClaimsEndpoint">https://api.github.com/user</Item>
                        <Item Key="scope">user user:email</Item>
                        <Item Key="HttpBinding">POST</Item>
                        <Item Key="UsePolicyInRedirectUri">0</Item>
                    </Metadata>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="githubUserId" PartnerClaimType="id"/>
                        <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name"/>
                        <OutputClaim ClaimTypeReferenceId="givenName" DefaultValue="rocky" AlwaysUseDefaultValue="true"/>
                        <OutputClaim ClaimTypeReferenceId="surname" DefaultValue="chen" AlwaysUseDefaultValue="true"/>
                        <OutputClaim ClaimTypeReferenceId="email" DefaultValue="test@github.com" AlwaysUseDefaultValue="true"/>
                        <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="github.com" AlwaysUseDefaultValue="true"/>
                        <OutputClaim ClaimTypeReferenceId="enableMFA" DefaultValue="false" AlwaysUseDefaultValue="true"/>
                        <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" AlwaysUseDefaultValue="true"/>

                    </OutputClaims>
                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName"/>
                        <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName"/>
                        <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityUserIdForGithub"/>
                        <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId"/>
                        <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId"/>
                    </OutputClaimsTransformations>
                    <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin"/>
                </TechnicalProfile>

            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <!-- The following Domain element allows this profile to be used if the request comes with domain_hint 
           query string parameter, e.g. domain_hint=facebook.com  -->
            <Domain>facebook.com</Domain>
            <DisplayName>Facebook</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="Facebook-OAUTH">
                    <!-- The text in the following DisplayName element is shown to the user on the claims provider 
               selection screen. -->
                    <DisplayName>Facebook</DisplayName>
                    <Protocol Name="OAuth2"/>
                    <Metadata>
                        <Item Key="ProviderName">facebook</Item>
                        <Item Key="authorization_endpoint">https://www.facebook.com/dialog/oauth</Item>
                        <Item Key="AccessTokenEndpoint">https://graph.facebook.com/oauth/access_token</Item>
                        <Item Key="ClaimsEndpoint">https://graph.facebook.com/me?fields=id,first_name,last_name,name,email</Item>
                        <Item Key="HttpBinding">GET</Item>
                        <Item Key="UsePolicyInRedirectUri">0</Item>

                        <!-- The Facebook required HTTP GET method, but the access token response is in JSON format from 3/27/2017 -->
                        <Item Key="AccessTokenResponseFormat">json</Item>
                        <Item Key="scope">email public_profile</Item>
                    </Metadata>
                    <InputClaims/>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="issuerUserId" PartnerClaimType="id"/>
                        <OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="first_name"/>
                        <OutputClaim ClaimTypeReferenceId="surname" PartnerClaimType="last_name"/>
                        <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name"/>
                        <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="email"/>
                        <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="facebook.com" AlwaysUseDefaultValue="true"/>
                        <OutputClaim ClaimTypeReferenceId="enableMFA" DefaultValue="false" AlwaysUseDefaultValue="true"/>
                        <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" AlwaysUseDefaultValue="true"/>
                    </OutputClaims>
                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName"/>
                        <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName"/>
                        <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId"/>
                    </OutputClaimsTransformations>
                    <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin"/>
                </TechnicalProfile>
            </TechnicalProfiles>
        </ClaimsProvider>


    </ClaimsProviders>

    <UserJourneys>

        <UserJourney Id="SignUpOrSignIn">
            <OrchestrationSteps>

                <OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signuporsignin">
                </OrchestrationStep>

                <!-- Check if the user has selected to sign in using one of the social providers -->
                <OrchestrationStep Order="2" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
                            <Value>objectId</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="DBCAM365Exchange" TechnicalProfileReferenceId="DBCAM365-OAUTH"/>
                        <ClaimsExchange Id="FacebookExchange" TechnicalProfileReferenceId="Facebook-OAUTH"/>
                        <ClaimsExchange Id="GoogleExchange" TechnicalProfileReferenceId="Google-OAUTH"/>
                        <ClaimsExchange Id="GitHubExchange" TechnicalProfileReferenceId="Github-OAUTH"/>
                        <ClaimsExchange Id="SignIn-WithEmail" TechnicalProfileReferenceId="LocalAccountDiscoveryUsingEmailAddress-SignIn"/>
                        <ClaimsExchange Id="SignUpWithLogonEmailExchange" TechnicalProfileReferenceId="LocalAccountSignUpWithLogonEmail"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- For social IDP authentication, attempt to find the user account in the directory. -->
                <OrchestrationStep Order="3" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>authenticationSource</Value>
                            <Value>localAccountAuthentication</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADUserReadUsingAlternativeSecurityId" TechnicalProfileReferenceId="AAD-UserReadUsingAlternativeSecurityId-NoError"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- Show self-asserted page only if the directory does not have the user account already (i.e. we do not have an objectId). 
          This can only happen when authentication happened using a social IDP. If local account was created or authentication done
          using ESTS in step 2, then an user account must exist in the directory by this time. -->
                <OrchestrationStep Order="4" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
                            <Value>objectId</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="SelfAsserted-Social" TechnicalProfileReferenceId="SelfAsserted-Social"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- This step reads any user attributes that we may not have received when authenticating using ESTS so they can be sent 
          in the token. -->
                <OrchestrationStep Order="5" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>authenticationSource</Value>
                            <Value>socialIdpAuthentication</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId"/>
                    </ClaimsExchanges>
                </OrchestrationStep>
                <!-- The previous step (SelfAsserted-Social) could have been skipped if there were no attributes to collect 
             from the user. So, in that case, create the user in the directory if one does not already exist 
             (verified using objectId which would be set from the last step if account was created in the directory. -->
                <OrchestrationStep Order="6" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
                            <Value>objectId</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADUserWrite" TechnicalProfileReferenceId="AAD-UserWriteUsingAlternativeSecurityId"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!--select mfa method for new user-->
                <OrchestrationStep Order="7" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>enableMFA</Value>
                            <Value>false</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
                            <Value>newUser</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="SelfAsserted-Select-MFA-Method" TechnicalProfileReferenceId="SelfAsserted-Select-MFA-Method"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- verify via phone -->
                <OrchestrationStep Order="8" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>enableMFA</Value>
                            <Value>false</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                            <Value>extension_mfaMethod</Value>
                            <Value>phone</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>identityProvider</Value>
                            <Value>local_passwordless</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="PhoneFactor-Verify" TechnicalProfileReferenceId="PhoneFactor-InputOrVerify"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!--  save phone number and mfa method if mfa method is phone  -->
                <OrchestrationStep Order="9" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>enableMFA</Value>
                            <Value>false</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                            <Value>extension_mfaMethod</Value>
                            <Value>phone</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
                            <Value>newPhoneNumberEntered</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADUserWriteWithObjectId" TechnicalProfileReferenceId="AAD-UserWritePhoneNumberUsingObjectId"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!--verify via email for existing user-->
                <OrchestrationStep Order="10" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>enableMFA</Value>
                            <Value>false</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                            <Value>extension_mfaMethod</Value>
                            <Value>email</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
                            <Value>newUser</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>identityProvider</Value>
                            <Value>local_passwordless</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="SelfAsserted-EmailVerify-existing-user" TechnicalProfileReferenceId="SelfAsserted-EmailVerify"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!--verify via email for new social user-->
                <OrchestrationStep Order="11" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>enableMFA</Value>
                            <Value>false</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                            <Value>extension_mfaMethod</Value>
                            <Value>email</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
                            <Value>newUser</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                            <Value>authenticationSource</Value>
                            <Value>socialIdpAuthentication</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="SelfAsserted-EmailVerify-new-socialuser" TechnicalProfileReferenceId="SelfAsserted-EmailVerify"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- generate totp qrcode if required-->
                <OrchestrationStep Order="12" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>enableMFA</Value>
                            <Value>false</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                            <Value>extension_mfaMethod</Value>
                            <Value>totp</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>totpRegistered</Value>
                            <Value>true</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>identityProvider</Value>
                            <Value>local_passwordless</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AUTH2GenerateTOTPQRCode" TechnicalProfileReferenceId="AUTH2-GenerateTOTPQRCode"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- let the user scan the qrcode to regester and verify the token -->
                <OrchestrationStep Order="13" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>enableMFA</Value>
                            <Value>false</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                            <Value>extension_mfaMethod</Value>
                            <Value>totp</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
                            <Value>totpQRCodeBitmap</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="TOTPFactorRegister" TechnicalProfileReferenceId="TOTPFactor-Register"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- Verify the token for registered user -->
                <OrchestrationStep Order="14" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>enableMFA</Value>
                            <Value>false</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                            <Value>extension_mfaMethod</Value>
                            <Value>totp</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
                            <Value>totpQRCodeBitmap</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>identityProvider</Value>
                            <Value>local_passwordless</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="TOTPFactorChallenge" TechnicalProfileReferenceId="TOTPFactor-Challenge"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- save the totp registered flag and mfa method for newly registered user -->
                <OrchestrationStep Order="15" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>enableMFA</Value>
                            <Value>false</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                            <Value>extension_mfaMethod</Value>
                            <Value>totp</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
                            <Value>totpQRCodeBitmap</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADWriteUserTOTPByObjectId" TechnicalProfileReferenceId="AAD-WriteUserTOTPByObjectId"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!--save mfa method if user is a new user and mfa method is not phone and totpc-->
                <OrchestrationStep Order="16" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>enableMFA</Value>
                            <Value>false</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>extension_mfaMethod</Value>
                            <Value>phone</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>extension_mfaMethod</Value>
                            <Value>totp</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
                            <Value>newUser</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AAD-UserWriteMFAMethodUsingObjectId" TechnicalProfileReferenceId="AAD-UserWriteMFAMethodUsingObjectId"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <OrchestrationStep Order="17" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer"/>

            </OrchestrationSteps>
            <ClientDefinition ReferenceId="DefaultWeb"/>
        </UserJourney>

        <UserJourney Id="MFAReset">
            <OrchestrationSteps>

                <OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signuporsignin">
                </OrchestrationStep>

                <!-- Check if the user has selected to sign in using one of the social providers -->
                <OrchestrationStep Order="2" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
                            <Value>objectId</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="DBCAM365Exchange" TechnicalProfileReferenceId="DBCAM365-OAUTH"/>
                        <ClaimsExchange Id="FacebookExchange" TechnicalProfileReferenceId="Facebook-OAUTH"/>
                        <ClaimsExchange Id="GoogleExchange" TechnicalProfileReferenceId="Google-OAUTH"/>
                        <ClaimsExchange Id="GitHubExchange" TechnicalProfileReferenceId="Github-OAUTH"/>
                        <ClaimsExchange Id="SignIn-WithEmail" TechnicalProfileReferenceId="LocalAccountDiscoveryUsingEmailAddress-SignIn"/>
                        <ClaimsExchange Id="LocalAccountSigninEmailExchange" TechnicalProfileReferenceId="SelfAsserted-LocalAccountSignin-Email"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- For social IDP authentication, attempt to find the user account in the directory. -->
                <OrchestrationStep Order="3" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>authenticationSource</Value>
                            <Value>localAccountAuthentication</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADUserReadUsingAlternativeSecurityId" TechnicalProfileReferenceId="AAD-UserReadUsingAlternativeSecurityId-NoError"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- Show self-asserted page only if the directory does not have the user account already (i.e. we do not have an objectId). 
          This can only happen when authentication happened using a social IDP. If local account was created or authentication done
          using ESTS in step 2, then an user account must exist in the directory by this time. -->
                <OrchestrationStep Order="4" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
                            <Value>objectId</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="SelfAsserted-Social" TechnicalProfileReferenceId="SelfAsserted-Social"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- This step reads any user attributes that we may not have received when authenticating using ESTS so they can be sent 
          in the token. -->
                <OrchestrationStep Order="5" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>authenticationSource</Value>
                            <Value>socialIdpAuthentication</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId"/>
                    </ClaimsExchanges>
                </OrchestrationStep>
                <!-- The previous step (SelfAsserted-Social) could have been skipped if there were no attributes to collect 
             from the user. So, in that case, create the user in the directory if one does not already exist 
             (verified using objectId which would be set from the last step if account was created in the directory. -->
                <OrchestrationStep Order="6" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
                            <Value>objectId</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADUserWrite" TechnicalProfileReferenceId="AAD-UserWriteUsingAlternativeSecurityId"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!--verify via email for existing user-->
                <OrchestrationStep Order="7" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>identityProvider</Value>
                            <Value>local_passwordless</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="SelfAsserted-EmailVerify-existing-user" TechnicalProfileReferenceId="SelfAsserted-EmailVerify"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!--select mfa method for new user-->
                <OrchestrationStep Order="8" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>enableMFA</Value>
                            <Value>false</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="SelfAsserted-Select-MFA-Method" TechnicalProfileReferenceId="SelfAsserted-Select-MFA-Method"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- verify via phone -->
                <OrchestrationStep Order="9" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>enableMFA</Value>
                            <Value>false</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <!--Sample: If the preferred MFA method is not 'phone' skip this orchestration step-->
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                            <Value>extension_mfaMethod</Value>
                            <Value>phone</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="PhoneFactor-Verify" TechnicalProfileReferenceId="PhoneFactor-EditOrVerify"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!--  save phone number and mfa method if mfa method is phone  -->
                <OrchestrationStep Order="10" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>enableMFA</Value>
                            <Value>false</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                            <Value>extension_mfaMethod</Value>
                            <Value>phone</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADUserWriteWithObjectId" TechnicalProfileReferenceId="AAD-UserWritePhoneNumberUsingObjectId"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- generate totp qrcode if required-->
                <OrchestrationStep Order="11" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>enableMFA</Value>
                            <Value>false</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                            <Value>extension_mfaMethod</Value>
                            <Value>totp</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AUTH2GenerateTOTPQRCode" TechnicalProfileReferenceId="AUTH2-RegenerateTOTPQRCode"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- let the user scan the qrcode to regester and verify the token -->
                <OrchestrationStep Order="12" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>enableMFA</Value>
                            <Value>false</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                            <Value>extension_mfaMethod</Value>
                            <Value>totp</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="TOTPFactorRegister" TechnicalProfileReferenceId="TOTPFactor-Register"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- save the totp registered flag and mfa method for newly registered user -->
                <OrchestrationStep Order="13" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>enableMFA</Value>
                            <Value>false</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                            <Value>extension_mfaMethod</Value>
                            <Value>totp</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
                            <Value>totpQRCodeBitmap</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADWriteUserTOTPByObjectId" TechnicalProfileReferenceId="AAD-WriteUserTOTPByObjectId"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!--save mfa method if user is a new user and mfa method is not phone and totpc-->
                <OrchestrationStep Order="14" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>enableMFA</Value>
                            <Value>false</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>extension_mfaMethod</Value>
                            <Value>phone</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>extension_mfaMethod</Value>
                            <Value>totp</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AAD-UserWriteMFAMethodUsingObjectId" TechnicalProfileReferenceId="AAD-UserWriteMFAMethodUsingObjectId"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <OrchestrationStep Order="15" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer"/>

            </OrchestrationSteps>
            <ClientDefinition ReferenceId="DefaultWeb"/>
        </UserJourney>

        <UserJourney Id="ProfileEdit">
            <OrchestrationSteps>

                <OrchestrationStep Order="1" Type="ClaimsProviderSelection" ContentDefinitionReferenceId="api.idpselections">
</OrchestrationStep>
                <OrchestrationStep Order="2" Type="ClaimsExchange">
                    <ClaimsExchanges>
                        <ClaimsExchange Id="DBCAM365Exchange" TechnicalProfileReferenceId="DBCAM365-OAUTH"/>
                        <ClaimsExchange Id="FacebookExchange" TechnicalProfileReferenceId="Facebook-OAUTH"/>
                        <ClaimsExchange Id="GoogleExchange" TechnicalProfileReferenceId="Google-OAUTH"/>
                        <ClaimsExchange Id="SignIn-WithEmail" TechnicalProfileReferenceId="LocalAccountDiscoveryUsingEmailAddress-SignIn"/>
                        <ClaimsExchange Id="LocalAccountSigninEmailExchange" TechnicalProfileReferenceId="SelfAsserted-LocalAccountSignin-Email"/>
                    </ClaimsExchanges>
                </OrchestrationStep>
                <OrchestrationStep Order="3" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>authenticationSource</Value>
                            <Value>localAccountAuthentication</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADUserRead" TechnicalProfileReferenceId="AAD-UserReadUsingAlternativeSecurityId"/>
                    </ClaimsExchanges>
                </OrchestrationStep>
                <OrchestrationStep Order="4" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>authenticationSource</Value>
                            <Value>socialIdpAuthentication</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <OrchestrationStep Order="5" Type="ClaimsExchange">
                    <ClaimsExchanges>
                        <ClaimsExchange Id="B2CUserProfileUpdateExchange" TechnicalProfileReferenceId="SelfAsserted-ProfileUpdate"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <OrchestrationStep Order="6" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer"/>

            </OrchestrationSteps>
            <ClientDefinition ReferenceId="DefaultWeb"/>
        </UserJourney>

        <UserJourney Id="PasswordReset">
            <OrchestrationSteps>
                <OrchestrationStep Order="1" Type="ClaimsExchange">
                    <ClaimsExchanges>
                        <ClaimsExchange Id="PasswordResetUsingEmailAddressExchange" TechnicalProfileReferenceId="LocalAccountDiscoveryUsingEmailAddress"/>
                    </ClaimsExchanges>
                </OrchestrationStep>
                <OrchestrationStep Order="2" Type="ClaimsExchange">
                    <ClaimsExchanges>
                        <ClaimsExchange Id="NewCredentials" TechnicalProfileReferenceId="LocalAccountWritePasswordUsingObjectId"/>
                    </ClaimsExchanges>
                </OrchestrationStep>
                <OrchestrationStep Order="3" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer"/>
            </OrchestrationSteps>
            <ClientDefinition ReferenceId="DefaultWeb"/>
        </UserJourney>

        <UserJourney Id="MFASet">
            <OrchestrationSteps>

                <OrchestrationStep Order="1" Type="ClaimsProviderSelection" ContentDefinitionReferenceId="api.idpselections">
</OrchestrationStep>
                <OrchestrationStep Order="2" Type="ClaimsExchange">
                    <ClaimsExchanges>
                        <ClaimsExchange Id="DBCAM365Exchange" TechnicalProfileReferenceId="DBCAM365-OAUTH"/>
                        <ClaimsExchange Id="FacebookExchange" TechnicalProfileReferenceId="Facebook-OAUTH"/>
                        <ClaimsExchange Id="GoogleExchange" TechnicalProfileReferenceId="Google-OAUTH"/>
                        <ClaimsExchange Id="LocalAccountSigninEmailExchange" TechnicalProfileReferenceId="SelfAsserted-LocalAccountSignin-Email"/>
                        <ClaimsExchange Id="SignIn-WithEmail" TechnicalProfileReferenceId="LocalAccountDiscoveryUsingEmailAddress-SignIn"/>
                    </ClaimsExchanges>
                </OrchestrationStep>
                <OrchestrationStep Order="3" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>authenticationSource</Value>
                            <Value>localAccountAuthentication</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADUserRead" TechnicalProfileReferenceId="AAD-UserReadUsingAlternativeSecurityId"/>
                    </ClaimsExchanges>
                </OrchestrationStep>
                <OrchestrationStep Order="4" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>authenticationSource</Value>
                            <Value>socialIdpAuthentication</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!--select mfa method-->
                <OrchestrationStep Order="5" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>enableMFA</Value>
                            <Value>false</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="SelfAsserted-Select-MFA-Method" TechnicalProfileReferenceId="SelfAsserted-Select-MFA-Method"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- verity via phone -->
                <OrchestrationStep Order="6" Type="ClaimsExchange">
                    <Preconditions>
                        <!--Sample: If the preferred MFA method is not 'phone' skip this orchestration step-->
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>enableMFA</Value>
                            <Value>false</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                            <Value>extension_mfaMethod</Value>
                            <Value>phone</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="PhoneFactor-Verify" TechnicalProfileReferenceId="PhoneFactor-EditOrVerify"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!--  save phone number and mfa method if mfa method is phone  -->
                <OrchestrationStep Order="7" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>enableMFA</Value>
                            <Value>false</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                            <Value>extension_mfaMethod</Value>
                            <Value>phone</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADUserWriteWithObjectId" TechnicalProfileReferenceId="AAD-UserWritePhoneNumberUsingObjectId"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!--verify via email-->
                <OrchestrationStep Order="8" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>enableMFA</Value>
                            <Value>false</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                            <Value>extension_mfaMethod</Value>
                            <Value>email</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="SelfAssertedEmailVerify" TechnicalProfileReferenceId="SelfAsserted-EmailVerify"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- generate totp qrcode if required-->
                <OrchestrationStep Order="9" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>enableMFA</Value>
                            <Value>false</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                            <Value>extension_mfaMethod</Value>
                            <Value>totp</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>totpRegistered</Value>
                            <Value>true</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AUTH2GenerateTOTPQRCode" TechnicalProfileReferenceId="AUTH2-GenerateTOTPQRCode"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- let the user scan the qrcode to regester and verify the token -->
                <OrchestrationStep Order="10" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>enableMFA</Value>
                            <Value>false</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                            <Value>extension_mfaMethod</Value>
                            <Value>totp</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
                            <Value>totpQRCodeBitmap</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="TOTPFactorRegister" TechnicalProfileReferenceId="TOTPFactor-Register"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- Verify the token for registered user -->
                <OrchestrationStep Order="11" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>enableMFA</Value>
                            <Value>false</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                            <Value>extension_mfaMethod</Value>
                            <Value>totp</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
                            <Value>totpQRCodeBitmap</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="TOTPFactorChallenge" TechnicalProfileReferenceId="TOTPFactor-Challenge"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- save the totp registered flag and mfa method for newly registered user -->
                <OrchestrationStep Order="12" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>enableMFA</Value>
                            <Value>false</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                            <Value>extension_mfaMethod</Value>
                            <Value>totp</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
                            <Value>totpQRCodeBitmap</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADWriteUserTOTPByObjectId" TechnicalProfileReferenceId="AAD-WriteUserTOTPByObjectId"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- save the selected mfa method only if the method is not phone and totp method -->
                <OrchestrationStep Order="13" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>enableMFA</Value>
                            <Value>false</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>extension_mfaMethod</Value>
                            <Value>phone</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>extension_mfaMethod</Value>
                            <Value>totp</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AAD-UserWriteMFAMethodUsingObjectId" TechnicalProfileReferenceId="AAD-UserWriteMFAMethodUsingObjectId"/>
                    </ClaimsExchanges>
                </OrchestrationStep>

                <OrchestrationStep Order="14" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer"/>

            </OrchestrationSteps>
            <ClientDefinition ReferenceId="DefaultWeb"/>
        </UserJourney>

    </UserJourneys>
</TrustFrameworkPolicy>
